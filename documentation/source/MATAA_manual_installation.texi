@node Installation and Setup
@chapter Installation and Setup

Before digging in, I believe the following note is in order: installing MATAA and MATLAB/Octave may be difficult for those who are not experienced computer buffs. If you need help, ask a wizard. If you don't have a wizard at hand, try asking me at @email{@value{CONTACT-EMAIL}}.

@menu
* Installing MATLAB/Octave:: What to consider with installing MATLAB or Octave
* Installing MATAA:: How to install MATAA
* Hardware Setup:: wiring and configuring your sound hardware and the analytical set up
* Testing the Installation:: Is MATAA properly installed and set up?
@end menu

@cindex MATLAB, installation
@cindex Octave, installation
@cindex Installing MATLAB
@cindex Installing Octave
@node Installing MATLAB/Octave
@section MATLAB/Octave
To run MATAA, you need to install either MATLAB or Octave. I leave it up to you to decide on either of those. You can also install both MATLAB and Octave, they can peacefully co-exist on the same computer. MATLAB is an expensive commercial product, and you get what you pay for (see @uref{http://www.mathworks.com} for details). In contrast, Octave is free software, but you still get a lot from it (more than enough for MATAA), see @uref{http://www.octave.org} for details. Furthermore, there is a very helpful mailing list where you can get help and assistance with Octave, see @uref{http://www.octave.org/help}. Depending on your computer platform and operating system, the installation of MATLAB or Octave will be different. Please follow the instructions that come with MATLAB/Octave.

If you decide to run MATAA using Octave, I highly recommend to use Octave 3.0 or later. While earlier MATAA versions were able to run on Octave 2.1 or 2.9, version 3.0 incorporates a large part of Matlab's handle-graphics system. To simplifiy further development of MATAA on both Octave and Matlab, I therefore decided to drop support for the older gnuplot-oriented graphics system in Octave. The plotting routines of current versions of MATAA therefore rely on Octave 3.0 or later.

@cindex Default path (MATLAB/Octave)
@cindex MATLAB default path
@cindex Octave default path
@cindex Path, default (MATLAB/Octave)
I recommend to keep all your MATLAB/Octave code and packages in one directory (which may of course contain several subdirectories). This greatly helps MATLAB/Octave to find your files. For MATLAB, the default path for this is @file{~/MATLAB} (where @file{~} indicates your home directory). For Octave, there is no default (I believe), but I recommend to use either @file{~/Octave/} or, if you have both MATLAB and Octave installed and want to keep the MATLAB/Octave files in the same directory, @file{~/MATLAB/}.

@anchor{Installing_MATAA}
@cindex MATAA, installation
@cindex MATAA, obtaining/download
@cindex Installing MATAA
@cindex Download, MATAA
@node Installing MATAA
@section MATAA
First of all, download MATAA. There are two possiblities:

@itemize

@item Download a recent package file from  @uref{@value{MATAA-URL}} and expand it if your internet browser or computer didn't do so already. If you later need to update to a more current version, download the most current package file, expand it and replace your previous version with the new one.
@item Download the most current version using subversion with the following command:@*
@command{svn checkout https://github.com/mbrennwa/mataa/trunk}@*
Then rename @command{trunk} to @command{mataa}. On Linux or Mac OS X:@*
@command{mv trunk mataa}@*
If you later need to update to the current version, use the following command:@*
@command{svn update}
@end itemize

You should now have a directory @file{mataa} containing several sub-directories. Make sure @file{mataa} (and its subdirectories) is located in the MATLAB/Octave search path. For the purpose of this documentation, it is assumed that @file{mataa} is installed in @file{~/MATLAB/} (see @ref{Installing MATLAB/Octave}). Your MATAA setup should now look like this (in alphabetical order):
@itemize

@cindex Default path (MATAA)
@cindex MATAA default paths
@cindex Path, default (MATAA)

@item @file{~/MATLAB/mataa/documentation/}: This directory contains the MATAA documentation and manual in various formats.
@cindex MATAA documentation
@cindex Documentaion, MATAA
@cindex Manual, MATAA

@item @file{~/MATLAB/mataa/mataa_scripts/}: This directory contains various demo and test scripts.
@cindex Scripts, MATAA
@cindex MATAA scripts

@item @file{~/MATLAB/mataa/mataa_tools/}: This directory contains the MATAA `tools' (see @ref{MATAATools,,MATAA tools}).
@cindex Tools
@cindex MATAA tools

@item @file{~/MATLAB/mataa/microphone_data/}: This directory contains files with information on the characteristics of measurement microphones (this data will be used to correct for the microphone characteristics, e.g. for loudspeaker testing).
@cindex Microphone calibration file
@cindex Calibration file (microphone)

@item @file{~/MATLAB/mataa/test_signals}: This directory contains various test-signal files.
@cindex Test signal files, default path
@cindex Default path (test signal files)

@item @file{~/MATLAB/mataa/TestTone}: This directory contains the TestTone and TestDevices programs (binaries for Mac OS X and Windows, as well as the source code if you want to compile for other platforms.).
@cindex TestTone
@cindex TestDevices

@item @file{~/.mataa_settings.mat}: This file is used to store the `preferences' of MATAA (e.g. the color to be used for data plotting). Don't worry if this file is missing---MATAA will create it for you.
@cindex Settings, MATAA
@cindex Preferences, MATAA
@cindex MATAA settings/preferences

@end itemize

In addition to these files and paths, you might consider to create an additional path to keep your custom MATAA scripts. I highly recommend to keep this path outside the main MATAA path. Otherwise it will be difficult to upgrade to a newer version of MATAA and you increase the risk of accidentally loosing your custom files during the upgrade process. For instance, I keep my custom MATAA scripts in @file{~/MATLAB/mataa_user_scripts/}.

@cindex Startup file, MATLAB/Octave
@cindex MATLAB, startup file
@cindex Octave, startup file
If everything set up as outlined above, you are ready to use MATAA from within MATLAB/Octave. However, MATLAB/Octave will (most propably) not find the MATAA files. To tell MATLAB/Octave where the MATAA files are, you can use the @command{addpath}Ê (with older versions of Octave, you may have to use @command{path}Êinstead). To automate this task, I recommend to put the necessary commands into the so-called startup file of MATLAB/Octave. This file is executed by MATLAB/Octave everytime MATLAB/Octave is started. You can edit the startup file, which is an ASCII text file, using your preferred text editor:

@itemize
@item For MATLAB, the startup file is @file{~/MATLAB/startup.m}
@item For Octave, the startup file is @file{~/.octaverc} (note the dot in the file name)
@end itemize

For example, assume you have installed MATAA to @file{~/MATLAB/mataa/}. Add the following lines to the end of this file:

@example
addpath ("~/MATLAB/mataa/mataa_tools");
addpath ("~/MATLAB/mataa/mataa_scripts");
addpath ("~/MATLAB/mataa/calibration");
@end example

If you created a directory @file{~/MATLAB/mataa_user_scripts/} to store your custom MATAA stuff, you may add the following line to let MATLAB/Octave know about this::

@example
addpath ("~/MATLAB/mataa_user_scripts");
@end example

If the path to your MATAA files contains spaces, you will need to add a backslash in front of the space(s). Otherwise MATLAB/Octave will not recognize the space(s) and the @command{path} commands will fail. For example, if your MATAA files are in @file{~/My Octave files/mataa}, the above lines would read @command{addpath ("~/My\ Octave\ files/mataa/mataa_tools/");}, etc.

Also, it is not recommended to install the MATAA files (or any of your personal MATLAB/Octave files) to the path where the MATLAB/Octave program is installed. Once you update your MATLAB/Octave software to a later version, the previous program files may be deleted, and hence your MATAA (or other personal MATLAB/Octave files) will be deleted, too.

@c If you are running Octave on Mac OS X, you may also want to tweak the behaviour of X11 a bit. If you want to use Octave with Terminal.app rather than the X11 terminal, you will need to tell the terminal where to send X11 plotting commands. If you're using bash with Terminal.app (the default shell on Mac OS X 10.3 and later), create a file @file{.profile}Êin your home directory (if it's not already there) and add the command @command{[[ -z $DISPLAY ]] && export DISPLAY=":0.0"} to it in order to redirect the plotting commands to X11. This command will be executed the next time bash is started and reads the @file{.profile}Êfile. Also, you may want to tell X11.app to automatically start when you log in to the computer.

@cindex Hardware Setup
@cindex Audio hardware setup
@cindex Settings, Audio hardware
@node Hardware Setup
@section Hardware Setup
The way your sound hardware (soundcard or audio interface) needs to be set up for use with MATAA will depend on its features, on your computer platform, and on the type of measurement you want to make. Furthermore, additional devices (e.g. amplifiers, filters, microphones, etc.) may be needed for certain measurements. Hence, the hardware setup will vary with the type of measurement and the specifics your equipment. This manual therefore aims to provide rather general advice and background on what to watch out for.

That said, you should also remember that a measurement can only be as good as the audio hardware you use!

@cindex Measurement setup
@cindex Setup, measurement
@subsection The Building Blocks of the Measurement Setup
@cindex Signal path
@cindex Test signal path
@cindex Path, test signal
The basic procedure followed during a MATAA measurement is that MATAA feeds a test signal to the soundcard, which is connected to the DUT. The response of the DUT to this test signal is recorded by the soundcard. The response signal is then loaded back into MATAA for further analysis.

@float Figure,fig:measurement_setup
@iftex
@image{figures/measurement_setup,6in,,general measurement setup}
@end iftex
@ifnottex
@image{figures/measurement_setup,,,general measurement setup}
@end ifnottex
@caption{`Generalised' measurement setup. A: buffer or amplifier to drive the DUT (optional), B: sensor to record the DUT's response signal (e.g. microphone), C: output signal buffer or amplifier (e.g. microphone amplifier), D: anti-alias filter (may be omitted in special cases, see text). To calibrate the signal levels, MATAA takes into account the gain and transfer functions of the soundcard (input and output), amplifiers, and the detector; The DAC (digital-to-analog conversion including buffer or amplifier), the sensor (B), and the ADC (analog to digital conversion including buffer or amplifier) are considered separately for calibration (see text).}
@end float

@ref{fig:measurement_setup} shows the measurement setup, which consists of several building blocks. Depending on the type of measurement and setup, some (or most) of these building blocks are obsolete. In @ref{fig:measurement_setup}, the test signal travels through the following blocks:

@cindex Sound hardware setup
@cindex Hardware setup, sound
@cindex Setup, sound hardware
@itemize

@item The audio output of the soundcard. The the sound hardware is usually set up via the operating system. The output level of the soundcard should be set as high as possible to maximise the signal/noise ratio (SNR). Apart from thatz, the quality of the test signal will depend on the quality of the soundcard (e.g. the D/A converter). Today, most soundcards support sampling rates of 44.1 kHz and bit depths of 16 bits (CD quality), which is fine for many types of measurements. Many soundcards allow sampling rates of 96 kHz or even 192 kHz and sampling depths of 24 bits, therefore providing more headroom with respect to SNR and the upper frequency limit. In some applications (e.g. for low-frequency analyses utilising long test signals), however, low sampling rates are preferable to minimise memory and computing time. Most soundcards allow sampling frequencies as low as 8 kHz. Another aspect of the souncard output is the output impedance and output power. The output impedance should be much lower than the input impedance of the next stage. While most soundcards can easily drive high-impedance headphones, the output impedance may be too high and the output power too low to directly drive a loudspeaker or other low-impedance DUT.

@item A buffer or amplifier (A in @ref{fig:measurement_setup}). Depending on the DUT, you will need a buffer or amplifier to match the impedance and power loevel to the DUT.

@item The device under test (DUT). In principle, this can be anything accepting an electrical sound at its input. Typical MATAA applications include loudspeakers and speaker crossover filters, as well as active devices such as active filters or amplifiers.

@item A sensor (B in @ref{fig:measurement_setup}) to convert the output signal of the DUT to an electrical signal. For instance, this sensor may be a microphone or an accelerometer (e.g. for loudspeaker testing). If the output of the DUT is electrical (e.g. in case of a filter circuit or an amplifier), the DUT's output should be terminated by a resistor, which can be considered to act as a sensor. This resistor should have the same value as the impedance of the device that would otherwise be connected to the output of the DUT. For testing loudspeaker crossover filters, consider connecting the filter output to the speaker driver(s) rather than a resistor, because the behaviour of the filter may depend on the complex impedance of the driver(s). If the signal voltage from the sensor (or the DUT) is higher than the maximum voltage of the next stage, you will need to attenuate the signal, e.g. using a voltage divider. In some cases (e.g. to analyse high-voltage signals in tube amplifiers), I strongly recommend to add further over-voltage protection to avoid destroying anything!

@item A buffer or amplifier (C in @ref{fig:measurement_setup}) to match the signal amplitude and impedance level of the DUT response to the input of the soundcard. If the DUT's respons was recorded with a microphone, this will be a microphone amplifier. In many other cases, this buffer/amplifier can be omitted, provided the output impedance of the previous stage (the sensor) is much lower than the input impedance of the next stage.

@cindex Anti-aliasing filter
@cindex Filter, anti-aliasing
@item The anti-aliasing filter (D in @ref{fig:measurement_setup}) removes high-frequency components from the DUT's response signal. If the the DUT response contains signal components with frequencies higher than the Nyquist frequency (half the sampling frequency) of the sound input's analog-to-digital (A/D) converter, these signal components will be aliased to lower frequencies during A/D conversion. This signal `contamination' can be avoided (or at least constrained) by removing the signal components higher than the Nyquist frequency @emph{before} A/D conversion. Many soundcards have a built-in anti-aliasing filter with a cut-off frequency that is automatically adjusted to the sampling rate. You can check for the presence of an anti-aliasing filter by applying sine signals with frequencies higher than the Nyquist frequency (e.g. using an analog signal generator). Then check the digitized signal for alias signals in the frequency range below the Nyquist frequency. Furhter, if the signal from the DUT is (virtually) free of frequencies higher then the Nyquist frequency, you can omit the anti-aliasing filter. Vice versa, you can omit the anti-aliasing filter, if the soundcard samples the test signal with a sampling rate of at least twice the highest frequency contained in the test signal. For instance, loudspeakers and test microphones rarely extend to frequencies higher than 40 kHz. Thus, if your soundcard allows setting the sampling rate to 80 kHz or higher (e.g. 96 kHz or 192 kHz), you can omit the anti-aliasing filter by using a sampling rate of at least 80 kHz.

@item The Soundcard audio input: Here, the same applies as with the audio input, with a few exceptions. Firstly, a high input impedance is preferable so that the previous stage can easily drive the audio input. Secondly, the sensitivity of the analog-to-digital (A/D) converter should be set as high as possible (to maximise SNR), but not too high (to avoid clipping of the signal).

@item Signal calibration: MATAA takes into account the sensitivity and gain of the DAC and ADC blocks, as well as the sensitivity and the potentially frequency-dependent transfer function of the signal sensor. See @ref{Data calibration}.

@end itemize

@cindex Soundcard
@cindex TestTone
@cindex TestDevices
@cindex PlayRec
@subsection Software interfaces for sound-card access
There are two user-selectable methods for MATAA to talk to a sound card. The first method is to use the TestTone and TestDevices programs. The second option is PlayRec. Both options rely on PortAudio to talk to the sound card (@uref{http://www.portaudio.com}). The quality of the measurement data (sample rate, sample depth) obtained from TestTone or PlayRec is the same. The advantage of TestTone and TestDevices is that they are supported very well by MATAA on many operating systems and sound APIs. The advantage of PlayRec is that it allows much faster data exchange with MATAA, but its current MATAA implementation is still experimental and has been tested on Linux only.

The use of TestTone / TestDevices vs. PlayRec is configured in MATAA by using the following settings:
@example
mataa_settings ('audio_IO_method','TestTone')
mataa_settings ('audio_IO_method','PlayRec')
@end example

@subsection Using MATAA with TestTone and TestDevices
The TestTone and TestDevices programs are part of the MATAA package, see @ref{Installing MATAA}). The TestTone program is used for output and input of audio data via the sound card. The TestDevices program is used to obtain information about the sound card. If your computer has more than one device for sound input or output, MATAA uses the default device set for your computer. The TestTone and TestDevices programs were developed specifically for MATAA. The data exchange between MATAA and TestTone or TestDevices is handled by writing / reading data to / from ASCII files. This form of data exchange is slow, but works very reliably on all kinds of different platforms.

A few notes:
@itemize

@item The TestTone and TestDevices programs will always use the audio devices configured as default devices in the operting system.

@item The Windows versions of TestTone and TestDevices only work with ASIO drivers (WMME and DirectSound are not supported). If your soundcard did not come with an ASIO driver, check out ASIO4ALL (@uref{http://www.asio4all.com}). The Windows binaries were compiled by Shu Sang (@email{sangshu@@hotmail.com}) -- thank you Shu! Please note that Shu used Microsoft Visual Studio to compile TestTone and TestDevices. Therefore, if you experience problems with sound input or output, you may need to install the Microsoft Visual C++ 2005 SP1 Redistributable Package (x86) to make TestTone and TestDevices work properly. You can download the package here:
@uref{http://www.microsoft.com/downloads/details.aspx?familyid=200B2FD9-AE1A-4A14-984D-389C36F85647&displaylang=en} (thanks to Gabe for this hint!).

@item The Mac OS X versions of TestTone and TestDevices rely on CoreAudio, Apples application programming interface for sound on Mac OS X. CoreAudio provides automatic sample-rate conversion. It is therefore possible to use sample rates with MATAA that are not directly supported by the hardware.

@item The Linux versions of TestTone and TestDevices are available for Linux running on Intel and PowerPC machines. If you need to compile your own binaries using the source code included in the MATAA distribution, see @ref{Compiling TestTone and TestDevices on Linux}.

@end itemize

@subsubsection Configuration on Mac OS X

@float Figure,fig:mac_audio_settings
@iftex
@image{figures/mac_os_x_audio_settings,6in,,Audio hardware setup in Mac OS X}
@end iftex
@ifnottex
@image{figures/mac_os_x_audio_settings,,,Audio hardware setup in Mac OS X}
@end ifnottex
@caption{Audio hardware setup in Mac OS X (left: audio input, right: audio output). A: select the device to be used for audio output, B: set channel balance to `balanced', C: set output level as high as possible, D: select the device to be used for audio input, E: set input sensitivity as high as possible, but low enough to avoid clipping of the input signal.}
@end float

To set up the audio hardware in Mac OS X, choose `System Preferences' in the Apple menu. Then, click on `Sound', and follow the instructions in @ref{fig:measurement_setup}.

@subsubsection Linux

On Linux, I strongly recommend using ALSA (the Advanced Linux Sound Architecture). Choosing the right sound architecure and sound devices as the default devices (i.e. the devices that will be used by MATAA) depends on the Linux distribution used. Read the documentation for your system. Apart from that, the following terminal commands may be useful to find the relevant information on the sound devices available on your system:

@itemize
@item To display a list of the ALSA sound cards for sound output, including the current default device that will be used by MATAA:@*
@command{aplay -L}

@item To display a list of the ALSA sound cards for sound input, including the current default device that will be used by MATAA:@*
@command{arecord -L}

@item To display a list of the ALSA sound output devices:@*
@command{aplay -l}

@item To display a list of the ALSA sound input devices:@*
@command{arecord -l}

@item As an alternative, the following command displays information on the available ALSA devices:@*
@command{cat /proc/asound/devices}

@end itemize

Also, reading the ALSA instructions on @url{http://www.alsa-project.org} or @url{http://seehuhn.de/pages/alsa} will be helpful. From reading these documents, I found that all I needed to do on my system was to create a file @file{~/.asoundrc}, which specifices the default. As an illustration, this is how the file looks on one of my systems:
@example
pcm.!default @{
    type hw
    card 0
@}
ctl.!default @{
    type hw
    card 0
@}
@end example

Without this file, the default device on this system is set to something that thinks that there are 128 sound channels, both for input and output. MATAA therefore produces data for all 128 channels, both for input and output. Because my hardware only has two channels, the remaining 126 channels are somehow merged into two real channels, which takes a lot of CPU power. Sound input and output is therefore very time consuming, and I believe merging 128 data channels into the two sound channels of the hardware is not good for the data integrity. I therefore always double check if MATAA uses the right sound device using the @command{mataa_audio_info} command. On most systems, the number of sound channels should be 2, and probably not 128.

@c In ALSA, sound devices and sound cards are not the same. I think of sound cards as the `box' that contains all the chips and electronics to play or record sound, whereas the sound devices are the chips and electronics that produce the sound. Many sound cards have more than one sound device. For instance, a given sound card may contain a sound device for audio playback and another one for audio recording. Or, a sound card may contain different sound devices for analog and digital sound input and output. To make a long story short: it may be not enough to choose the right default sound card, you also need to choose the right sound device on that card.

@node Compiling TestTone and TestDevices on Linux
@anchor{Compiling TestTone and TestDevices on Linux}
@cindex TestTone
@cindex TestDevices
@cindex PortAudio
@cindex Linux
@subsubsection Compiling TestTone and TestDevices on Linux
Note that the precompiled binaries will run on most computers and Linux distributions. However, if you need to compile TestTone and TestDevices on Linux, please follow the instructions in the README that comes with the source code of TestTone and TestDevices. 

@subsection Using MATAA with PlayRec
PlayRec is a Matlab and Octave utility (MEX file) that provides simple yet versatile access to soundcards using PortAudio. In principle, PlayRec can be used on different operating systems and sound APIs. However, PlayRec support in MATAA is still experimental and has been tested on Linux only. In contrast to TestTone and TestDevices, PlayRec allows much faster data exchange with MATAA, because the PlayRec MEX utility is executed directly within Matlab or Octave.

To use PlayRec with MATAA, you need to download PlayRec from @url{https://github.com/mbrennwa/playrec}. To compile PlayRec for use with MATAA on Linux, follow the instructions in the file @file{COMPILE_AND_INSTALL_ON_LINUX.txt}. Make sure that PlayRec is on the searchpath of Matlab or Octave. For example, you could add the following to your @file{~/MATLAB/startup.m} or @file{~/.octaverc} file:
@example
addpath ("~/MATLAB/playrec");
@end example

You also need to tell MATAA which audio devices should be used for audio output and input:
@example
mataa_settings('audio_PlayRec_OutputDeviceName','RTX6001')
mataa_settings('audio_PlayRec_InputDeviceName','RTX6001')
@end example


@anchor{Sound channel allocation}
@cindex Channel allocation
@cindex Soundcard channel allocation
@cindex Allocation of soundcard channels
@cindex DUT channel
@cindex REF channel
@subsection Sound channel allocation
Most soundcards have at least two sound channels for stereo sound. While many measurements can be made using only one channel, there are a few cases where the second channel is needed to record a reference signal (e.g. impedance measurements, @ref{Impedance measurement}). In most other cases, using the second channel to record a calibration signal will allow you to correct for  artifacts that may be introduced by the test equipment, which will improve the precision and the quality of the measurement.

While @ref{fig:measurement_setup}Êshows the path of the test signal to and from the DUT, it does not show the path reference signal. The reference-signal path will depend strongly on the type of measurement and the test equipment used. @ref{fig:ref_signal_paths} is an attempt to illustrate some typical examples.

@float Figure,fig:ref_signal_paths
@iftex
@image{figures/ref_signal_paths,6in,,reference signal paths}
@end iftex
@ifnottex
@image{figures/ref_signal_paths,,,reference signal paths}
@end ifnottex
@caption{Some examples of how to use the second sound channel ('REF') of a stereo soundcard. A: both the power amplifier and the microphone amplifier are mono: wire the REF output directly to the REF input, B: the power amplifier has two (stereo) channels, but the microphone amplifier is mono: use the second channel of the power amplifier to calibrate for its characteristics, C: both the power amplifier and the microphone amplifier are stereo: use the second channel of the power amplifier and the microphone amplifier to calibrate for the characteristics of both amplifiers.}
@end float

By default, MATAA uses the left channel to record the test signal from the DUT, and the right channel to record the reference signal. If your soundcard uses 3.5 mm jacks, the DUT channel (left) should be on the tip of the 3.5 mm jack. The reference channel (right) should be on the ring in the middle of the jack. The ground (common to both channels) is on the contact closest to the body of the jack @ref{fig:jack}. If the left and right channels are revesed on the connectors of your soundcard, you can adjust the channel allocation using the @command{mataa_settings} command.

@float Figure,fig:jack
@iftex
@image{figures/jack,4in,,3.5 mm jack pinout}
@end iftex
@ifnottex
@image{figures/jack,,,3.5 mm jack pinout}
@end ifnottex
@caption{Pinout of 3.5 mm jack}
@end float


@anchor{Interchannel delay}
@cindex Interchannel delay
@cindex Delay, interchannel (soundcard)
@cindex Soundcard interchannel delay
@subsection Interchannel delay
With some (lesser) soundcards, the data recorded in one channel may be offset in time with respect to the other up to to several tens of microseconds. This effect is called ``interchannel delay''. Interchannel delay can result in wrong results from impedance measurements using the sine-sweep method as described in ``MATAA: A Free Computer-Based Audio Analysis System'' (article in audioXpress (7), 2007).

Therefore, interchannel delay must be removed from the measured data before calculating impedance function from the data. The @command{mataa_measure_impedance} command, which automates impedance measurement using the mentioned sine-sweep method, takes care of interchannel delay by shifting the measured data in time. The information on the amount of interchannel delay is taken from the MATAA settings file (the @command{interchannel_delay} field specifies the interchannel delay in seconds). By default, the interchannel delay is set to zero. You can adjust this value using the @command{mataa_settings} command (see @ref{mataa_settings}). For instance, with a soundcard exhibiting an interchannel delay of 17 microseconds, the interchannel delay parameter would be set by:

@example
mataa_settings('interchannel_delay',17E-6);
@end example

To test if your soundcard exhibits interchannel delay, it is best to measure the impedance of a resistor with a purely ohmic impedance (i.e. with constant resistance for all frequencies) using the method described in ``MATAA: A Free Computer-Based Audio Analysis System'' (article in audioXpress (7), 2007). If this measurement gives a flat impedance reading, your soundcard is not affected by interchannel delay (or the interchannel delay is already adjusted properly in the MATAA settings). Otherwise, you need to adjust the interchannel delay setting until you get a flat impedance reading.


@node Testing the Installation
@section Testing the Installation
To test your software installation, first start MATLAB or Octave. Then, type @command{mataa_selftest} to the MATLAB/Octave command prompt to run a MATAA self-test. @command{mataa_selftest} is a MATAA script in @file{.../mataa/mataa_scripts/} that runs several tests, that will display various messages on the success of the tests. Some tests may fail, but that does not necessarily mean that your MATAA installation is broken. If in doubt, carefully read the error or warning messages. If still in doubt, contact me at @email{@value{CONTACT-EMAIL}}.

The self-test script also includes a test of the hardware for sound input and output. Details on the setup of the sound hardware are given in @ref{Hardware Setup}. For now, it will suffice to run the self test with the soundcard input(s) connected directly to the output(s).

If MATLAB/Octave cannot find the @command{mataa_selftest} script, this most likely indicates that the script file is not on the search path of MATLAB/Octave. Double check the path settings outlined in @ref{Installing MATAA}. You can also type @command{path} to the MATLAB/Octave prompt to display the current search path.
